Token { type: FUNCTION, lexeme: "function", value: null, line: 7 }
Token { type: IDENTIFIER, lexeme: "main", value: null, line: 7 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 7 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 7 }
Token { type: LOCAL, lexeme: "local", value: null, line: 9 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 9 }
Token { type: COMMA, lexeme: ",", value: null, line: 9 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 9 }
Token { type: COMMA, lexeme: ",", value: null, line: 9 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 9 }
Token { type: COMMA, lexeme: ",", value: null, line: 9 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 9 }
Token { type: COMMA, lexeme: ",", value: null, line: 9 }
Token { type: IDENTIFIER, lexeme: "correct", value: null, line: 9 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 9 }
Token { type: FALSE, lexeme: "false", value: null, line: 9 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 9 }
Token { type: LOCAL, lexeme: "local", value: null, line: 10 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 10 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 10 }
Token { type: FALSE, lexeme: "false", value: null, line: 10 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 10 }
Token { type: LOCAL, lexeme: "local", value: null, line: 11 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 11 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 11 }
Token { type: FALSE, lexeme: "false", value: null, line: 11 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 11 }
Token { type: LOCAL, lexeme: "local", value: null, line: 12 }
Token { type: IDENTIFIER, lexeme: "left", value: null, line: 12 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 12 }
Token { type: FALSE, lexeme: "false", value: null, line: 12 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 12 }
Token { type: LOCAL, lexeme: "local", value: null, line: 13 }
Token { type: IDENTIFIER, lexeme: "finale", value: null, line: 13 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 13 }
Token { type: FALSE, lexeme: "false", value: null, line: 13 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 13 }
Token { type: LOCAL, lexeme: "local", value: null, line: 14 }
Token { type: IDENTIFIER, lexeme: "turn", value: null, line: 14 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 14 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 14 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 14 }
Token { type: LOCAL, lexeme: "local", value: null, line: 15 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 15 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 15 }
Token { type: LEFT_BRACE, lexeme: "{", value: null, line: 15 }
Token { type: RIGHT_BRACE, lexeme: "}", value: null, line: 15 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 15 }
Token { type: LOCAL, lexeme: "local", value: null, line: 16 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 16 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 16 }
Token { type: LEFT_BRACE, lexeme: "{", value: null, line: 16 }
Token { type: RIGHT_BRACE, lexeme: "}", value: null, line: 16 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 16 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 18 }
Token { type: undefined, lexeme: ".", value: null, line: 18 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 18 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 18 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 18 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 18 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 18 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 19 }
Token { type: undefined, lexeme: ".", value: null, line: 19 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 19 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 19 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 19 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 19 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 19 }
Token { type: FOR, lexeme: "for", value: null, line: 22 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 22 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 22 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 22 }
Token { type: COMMA, lexeme: ",", value: null, line: 22 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 22 }
Token { type: DO, lexeme: "do", value: null, line: 22 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 23 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 23 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 23 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 23 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 23 }
Token { type: LEFT_BRACE, lexeme: "{", value: null, line: 23 }
Token { type: RIGHT_BRACE, lexeme: "}", value: null, line: 23 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 23 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 24 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 24 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 24 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 24 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 24 }
Token { type: LEFT_BRACE, lexeme: "{", value: null, line: 24 }
Token { type: RIGHT_BRACE, lexeme: "}", value: null, line: 24 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 24 }
Token { type: FOR, lexeme: "for", value: null, line: 25 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 25 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 25 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 25 }
Token { type: COMMA, lexeme: ",", value: null, line: 25 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 25 }
Token { type: DO, lexeme: "do", value: null, line: 25 }
Token { type: IF, lexeme: "if", value: null, line: 26 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 26 }
Token { type: EQUAL, lexeme: "==", value: null, line: 26 }
Token { type: NUMBER, lexeme: "2", value: 2, line: 26 }
Token { type: OR, lexeme: "or", value: null, line: 26 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 26 }
Token { type: EQUAL, lexeme: "==", value: null, line: 26 }
Token { type: NUMBER, lexeme: "4", value: 4, line: 26 }
Token { type: THEN, lexeme: "then", value: null, line: 26 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 27 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 27 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 27 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 27 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 27 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 27 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 27 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 27 }
Token { type: STRING, lexeme: "\"_\"", value: "_", line: 27 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 27 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 28 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 28 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 28 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 28 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 28 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 28 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 28 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 28 }
Token { type: STRING, lexeme: "\"F\"", value: "F", line: 28 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 28 }
Token { type: ELSEIF, lexeme: "elseif", value: null, line: 29 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 29 }
Token { type: EQUAL, lexeme: "==", value: null, line: 29 }
Token { type: NUMBER, lexeme: "2", value: 2, line: 29 }
Token { type: OR, lexeme: "or", value: null, line: 29 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 29 }
Token { type: EQUAL, lexeme: "==", value: null, line: 29 }
Token { type: NUMBER, lexeme: "4", value: 4, line: 29 }
Token { type: THEN, lexeme: "then", value: null, line: 29 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 30 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 30 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 30 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 30 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 30 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 30 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 30 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 30 }
Token { type: STRING, lexeme: "\"|\"", value: "|", line: 30 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 30 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 31 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 31 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 31 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 31 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 31 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 31 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 31 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 31 }
Token { type: STRING, lexeme: "\"F\"", value: "F", line: 31 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 31 }
Token { type: ELSE, lexeme: "else", value: null, line: 32 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 33 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 33 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 33 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 33 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 33 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 33 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 33 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 33 }
Token { type: STRING, lexeme: "\" \"", value: " ", line: 33 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 33 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 34 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 34 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 34 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 34 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 34 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 34 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 34 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 34 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 34 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 34 }
Token { type: END, lexeme: "end", value: null, line: 35 }
Token { type: END, lexeme: "end", value: null, line: 36 }
Token { type: END, lexeme: "end", value: null, line: 37 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 39 }
Token { type: undefined, lexeme: ".", value: null, line: 39 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 39 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 39 }
Token { type: STRING, lexeme: "\"WELCOME!! This is the Tic Tac Toe game.\\n\"", value: "WELCOME!! This is the Tic Tac Toe game.\\n", line: 39 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 39 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 39 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 40 }
Token { type: undefined, lexeme: ".", value: null, line: 40 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 40 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 40 }
Token { type: STRING, lexeme: "\"To place your move you must enter X and Y coordenates (the lines have their spot in even positions).\\n\"", value: "To place your move you must enter X and Y coordenates (the lines have their spot in even positions).\\n", line: 40 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 40 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 40 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 41 }
Token { type: undefined, lexeme: ".", value: null, line: 41 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 41 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 41 }
Token { type: STRING, lexeme: "\"The player 1 is the O (one) and player 2 is the T (two).\\n\"", value: "The player 1 is the O (one) and player 2 is the T (two).\\n", line: 41 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 41 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 41 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 42 }
Token { type: undefined, lexeme: ".", value: null, line: 42 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 42 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 42 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 42 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 42 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 42 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 43 }
Token { type: undefined, lexeme: ".", value: null, line: 43 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 43 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 43 }
Token { type: STRING, lexeme: "\"Let's get started!!\\n\\n\\n\"", value: "Let's get started!!\\n\\n\\n", line: 43 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 43 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 43 }
Token { type: FOR, lexeme: "for", value: null, line: 45 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 45 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 45 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 45 }
Token { type: COMMA, lexeme: ",", value: null, line: 45 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 45 }
Token { type: DO, lexeme: "do", value: null, line: 45 }
Token { type: FOR, lexeme: "for", value: null, line: 46 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 46 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 46 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 46 }
Token { type: COMMA, lexeme: ",", value: null, line: 46 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 46 }
Token { type: DO, lexeme: "do", value: null, line: 46 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 47 }
Token { type: undefined, lexeme: ".", value: null, line: 47 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 47 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 47 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 47 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 47 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 47 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 47 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 47 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 47 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 47 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 47 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 47 }
Token { type: END, lexeme: "end", value: null, line: 48 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 49 }
Token { type: undefined, lexeme: ".", value: null, line: 49 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 49 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 49 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 49 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 49 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 49 }
Token { type: END, lexeme: "end", value: null, line: 50 }
Token { type: WHILE, lexeme: "while", value: null, line: 52 }
Token { type: NOT, lexeme: "not", value: null, line: 52 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 52 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 52 }
Token { type: OR, lexeme: "or", value: null, line: 52 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 52 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 52 }
Token { type: AND, lexeme: "and", value: null, line: 52 }
Token { type: NOT, lexeme: "not", value: null, line: 52 }
Token { type: IDENTIFIER, lexeme: "finale", value: null, line: 52 }
Token { type: DO, lexeme: "do", value: null, line: 52 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 54 }
Token { type: undefined, lexeme: ".", value: null, line: 54 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 54 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 54 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 54 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 54 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 54 }
Token { type: IF, lexeme: "if", value: null, line: 56 }
Token { type: IDENTIFIER, lexeme: "turn", value: null, line: 56 }
Token { type: EQUAL, lexeme: "==", value: null, line: 56 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 56 }
Token { type: THEN, lexeme: "then", value: null, line: 56 }
Token { type: IDENTIFIER, lexeme: "correct", value: null, line: 57 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 57 }
Token { type: FALSE, lexeme: "false", value: null, line: 57 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 57 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 58 }
Token { type: undefined, lexeme: ".", value: null, line: 58 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 58 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 58 }
Token { type: STRING, lexeme: "\"Player 1, please enter coordenates for X: \"", value: "Player 1, please enter coordenates for X: ", line: 58 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 58 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 58 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 59 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 59 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 59 }
Token { type: undefined, lexeme: ".", value: null, line: 59 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 59 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 59 }
Token { type: STRING, lexeme: "\"*n\"", value: "*n", line: 59 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 59 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 59 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 60 }
Token { type: undefined, lexeme: ".", value: null, line: 60 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 60 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 60 }
Token { type: STRING, lexeme: "\"Player 1, please enter coordenates for Y: \"", value: "Player 1, please enter coordenates for Y: ", line: 60 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 60 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 60 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 61 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 61 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 61 }
Token { type: undefined, lexeme: ".", value: null, line: 61 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 61 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 61 }
Token { type: STRING, lexeme: "\"*n\"", value: "*n", line: 61 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 61 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 61 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 62 }
Token { type: undefined, lexeme: ".", value: null, line: 62 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 62 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 62 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 62 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 62 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 62 }
Token { type: WHILE, lexeme: "while", value: null, line: 64 }
Token { type: NOT, lexeme: "not", value: null, line: 64 }
Token { type: IDENTIFIER, lexeme: "correct", value: null, line: 64 }
Token { type: DO, lexeme: "do", value: null, line: 64 }
Token { type: IF, lexeme: "if", value: null, line: 65 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 65 }
Token { type: EQUAL, lexeme: "==", value: null, line: 65 }
Token { type: NUMBER, lexeme: "2", value: 2, line: 65 }
Token { type: OR, lexeme: "or", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 65 }
Token { type: EQUAL, lexeme: "==", value: null, line: 65 }
Token { type: NUMBER, lexeme: "4", value: 4, line: 65 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 65 }
Token { type: AND, lexeme: "and", value: null, line: 65 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 65 }
Token { type: EQUAL, lexeme: "==", value: null, line: 65 }
Token { type: NUMBER, lexeme: "2", value: 2, line: 65 }
Token { type: OR, lexeme: "or", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 65 }
Token { type: EQUAL, lexeme: "==", value: null, line: 65 }
Token { type: NUMBER, lexeme: "4", value: 4, line: 65 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 65 }
Token { type: OR, lexeme: "or", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 65 }
Token { type: GREATER, lexeme: ">", value: null, line: 65 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 65 }
Token { type: OR, lexeme: "or", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 65 }
Token { type: LESS, lexeme: "<", value: null, line: 65 }
Token { type: NUMBER, lexeme: "0", value: 0, line: 65 }
Token { type: OR, lexeme: "or", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 65 }
Token { type: GREATER, lexeme: ">", value: null, line: 65 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 65 }
Token { type: OR, lexeme: "or", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 65 }
Token { type: LESS, lexeme: "<", value: null, line: 65 }
Token { type: NUMBER, lexeme: "0", value: 0, line: 65 }
Token { type: OR, lexeme: "or", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 65 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 65 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 65 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 65 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 65 }
Token { type: EQUAL, lexeme: "==", value: null, line: 65 }
Token { type: STRING, lexeme: "\"F\"", value: "F", line: 65 }
Token { type: THEN, lexeme: "then", value: null, line: 65 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 66 }
Token { type: undefined, lexeme: ".", value: null, line: 66 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 66 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 66 }
Token { type: STRING, lexeme: "\"ERROR!! Can't place your move there. Player 1, please enter coordenates for X: \"", value: "ERROR!! Can't place your move there. Player 1, please enter coordenates for X: ", line: 66 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 66 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 66 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 67 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 67 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 67 }
Token { type: undefined, lexeme: ".", value: null, line: 67 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 67 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 67 }
Token { type: STRING, lexeme: "\"*n\"", value: "*n", line: 67 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 67 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 67 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 68 }
Token { type: undefined, lexeme: ".", value: null, line: 68 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 68 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 68 }
Token { type: STRING, lexeme: "\"*l\"", value: "*l", line: 68 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 68 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 68 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 69 }
Token { type: undefined, lexeme: ".", value: null, line: 69 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 69 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 69 }
Token { type: STRING, lexeme: "\"Player 1, please enter coordenates for Y: \"", value: "Player 1, please enter coordenates for Y: ", line: 69 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 69 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 69 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 70 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 70 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 70 }
Token { type: undefined, lexeme: ".", value: null, line: 70 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 70 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 70 }
Token { type: STRING, lexeme: "\"*n\"", value: "*n", line: 70 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 70 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 70 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 71 }
Token { type: undefined, lexeme: ".", value: null, line: 71 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 71 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 71 }
Token { type: STRING, lexeme: "\"*l\"", value: "*l", line: 71 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 71 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 71 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 72 }
Token { type: undefined, lexeme: ".", value: null, line: 72 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 72 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 72 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 72 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 72 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 72 }
Token { type: ELSE, lexeme: "else", value: null, line: 73 }
Token { type: IDENTIFIER, lexeme: "correct", value: null, line: 74 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 74 }
Token { type: TRUE, lexeme: "true", value: null, line: 74 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 74 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 75 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 75 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 75 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 75 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 75 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 75 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 75 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 75 }
Token { type: STRING, lexeme: "\"F\"", value: "F", line: 75 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 75 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 76 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 76 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 76 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 76 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 76 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 76 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 76 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 76 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 76 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 76 }
Token { type: IDENTIFIER, lexeme: "turn", value: null, line: 77 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 77 }
Token { type: NUMBER, lexeme: "2", value: 2, line: 77 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 77 }
Token { type: END, lexeme: "end", value: null, line: 78 }
Token { type: END, lexeme: "end", value: null, line: 79 }
Token { type: FOR, lexeme: "for", value: null, line: 81 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 81 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 81 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 81 }
Token { type: COMMA, lexeme: ",", value: null, line: 81 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 81 }
Token { type: DO, lexeme: "do", value: null, line: 81 }
Token { type: FOR, lexeme: "for", value: null, line: 82 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 82 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 82 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 82 }
Token { type: COMMA, lexeme: ",", value: null, line: 82 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 82 }
Token { type: DO, lexeme: "do", value: null, line: 82 }
Token { type: IF, lexeme: "if", value: null, line: 83 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 83 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 83 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 83 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 83 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 83 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 83 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 83 }
Token { type: EQUAL, lexeme: "==", value: null, line: 83 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 83 }
Token { type: THEN, lexeme: "then", value: null, line: 83 }
Token { type: IDENTIFIER, lexeme: "left", value: null, line: 84 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 84 }
Token { type: TRUE, lexeme: "true", value: null, line: 84 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 84 }
Token { type: END, lexeme: "end", value: null, line: 85 }
Token { type: IF, lexeme: "if", value: null, line: 86 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 86 }
Token { type: EQUAL, lexeme: "==", value: null, line: 86 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 86 }
Token { type: AND, lexeme: "and", value: null, line: 86 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 86 }
Token { type: EQUAL, lexeme: "==", value: null, line: 86 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 86 }
Token { type: AND, lexeme: "and", value: null, line: 86 }
Token { type: NOT, lexeme: "not", value: null, line: 86 }
Token { type: IDENTIFIER, lexeme: "left", value: null, line: 86 }
Token { type: THEN, lexeme: "then", value: null, line: 86 }
Token { type: IDENTIFIER, lexeme: "finale", value: null, line: 87 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 87 }
Token { type: TRUE, lexeme: "true", value: null, line: 87 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 87 }
Token { type: END, lexeme: "end", value: null, line: 88 }
Token { type: END, lexeme: "end", value: null, line: 89 }
Token { type: END, lexeme: "end", value: null, line: 90 }
Token { type: IDENTIFIER, lexeme: "left", value: null, line: 92 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 92 }
Token { type: FALSE, lexeme: "false", value: null, line: 92 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 92 }
Token { type: IF, lexeme: "if", value: null, line: 95 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 95 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 95 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 95 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 95 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 95 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 95 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 95 }
Token { type: EQUAL, lexeme: "==", value: null, line: 95 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 95 }
Token { type: AND, lexeme: "and", value: null, line: 95 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 95 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 95 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 95 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 95 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 95 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 95 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 95 }
Token { type: EQUAL, lexeme: "==", value: null, line: 95 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 95 }
Token { type: AND, lexeme: "and", value: null, line: 95 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 95 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 95 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 95 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 95 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 95 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 95 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 95 }
Token { type: EQUAL, lexeme: "==", value: null, line: 95 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 95 }
Token { type: THEN, lexeme: "then", value: null, line: 95 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 96 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 96 }
Token { type: TRUE, lexeme: "true", value: null, line: 96 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 96 }
Token { type: END, lexeme: "end", value: null, line: 97 }
Token { type: IF, lexeme: "if", value: null, line: 98 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 98 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 98 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 98 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 98 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 98 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 98 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 98 }
Token { type: EQUAL, lexeme: "==", value: null, line: 98 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 98 }
Token { type: AND, lexeme: "and", value: null, line: 98 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 98 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 98 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 98 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 98 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 98 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 98 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 98 }
Token { type: EQUAL, lexeme: "==", value: null, line: 98 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 98 }
Token { type: AND, lexeme: "and", value: null, line: 98 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 98 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 98 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 98 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 98 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 98 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 98 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 98 }
Token { type: EQUAL, lexeme: "==", value: null, line: 98 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 98 }
Token { type: THEN, lexeme: "then", value: null, line: 98 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 99 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 99 }
Token { type: TRUE, lexeme: "true", value: null, line: 99 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 99 }
Token { type: END, lexeme: "end", value: null, line: 100 }
Token { type: IF, lexeme: "if", value: null, line: 101 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 101 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 101 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 101 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 101 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 101 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 101 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 101 }
Token { type: EQUAL, lexeme: "==", value: null, line: 101 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 101 }
Token { type: AND, lexeme: "and", value: null, line: 101 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 101 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 101 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 101 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 101 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 101 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 101 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 101 }
Token { type: EQUAL, lexeme: "==", value: null, line: 101 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 101 }
Token { type: AND, lexeme: "and", value: null, line: 101 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 101 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 101 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 101 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 101 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 101 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 101 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 101 }
Token { type: EQUAL, lexeme: "==", value: null, line: 101 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 101 }
Token { type: THEN, lexeme: "then", value: null, line: 101 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 102 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 102 }
Token { type: TRUE, lexeme: "true", value: null, line: 102 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 102 }
Token { type: END, lexeme: "end", value: null, line: 103 }
Token { type: IF, lexeme: "if", value: null, line: 105 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 105 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 105 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 105 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 105 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 105 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 105 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 105 }
Token { type: EQUAL, lexeme: "==", value: null, line: 105 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 105 }
Token { type: AND, lexeme: "and", value: null, line: 105 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 105 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 105 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 105 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 105 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 105 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 105 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 105 }
Token { type: EQUAL, lexeme: "==", value: null, line: 105 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 105 }
Token { type: AND, lexeme: "and", value: null, line: 105 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 105 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 105 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 105 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 105 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 105 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 105 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 105 }
Token { type: EQUAL, lexeme: "==", value: null, line: 105 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 105 }
Token { type: THEN, lexeme: "then", value: null, line: 105 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 106 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 106 }
Token { type: TRUE, lexeme: "true", value: null, line: 106 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 106 }
Token { type: END, lexeme: "end", value: null, line: 107 }
Token { type: IF, lexeme: "if", value: null, line: 108 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 108 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 108 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 108 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 108 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 108 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 108 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 108 }
Token { type: EQUAL, lexeme: "==", value: null, line: 108 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 108 }
Token { type: AND, lexeme: "and", value: null, line: 108 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 108 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 108 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 108 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 108 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 108 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 108 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 108 }
Token { type: EQUAL, lexeme: "==", value: null, line: 108 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 108 }
Token { type: AND, lexeme: "and", value: null, line: 108 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 108 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 108 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 108 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 108 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 108 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 108 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 108 }
Token { type: EQUAL, lexeme: "==", value: null, line: 108 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 108 }
Token { type: THEN, lexeme: "then", value: null, line: 108 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 109 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 109 }
Token { type: TRUE, lexeme: "true", value: null, line: 109 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 109 }
Token { type: END, lexeme: "end", value: null, line: 110 }
Token { type: IF, lexeme: "if", value: null, line: 111 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 111 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 111 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 111 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 111 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 111 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 111 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 111 }
Token { type: EQUAL, lexeme: "==", value: null, line: 111 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 111 }
Token { type: AND, lexeme: "and", value: null, line: 111 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 111 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 111 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 111 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 111 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 111 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 111 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 111 }
Token { type: EQUAL, lexeme: "==", value: null, line: 111 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 111 }
Token { type: AND, lexeme: "and", value: null, line: 111 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 111 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 111 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 111 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 111 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 111 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 111 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 111 }
Token { type: EQUAL, lexeme: "==", value: null, line: 111 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 111 }
Token { type: THEN, lexeme: "then", value: null, line: 111 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 112 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 112 }
Token { type: TRUE, lexeme: "true", value: null, line: 112 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 112 }
Token { type: END, lexeme: "end", value: null, line: 113 }
Token { type: IF, lexeme: "if", value: null, line: 115 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 115 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 115 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 115 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 115 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 115 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 115 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 115 }
Token { type: EQUAL, lexeme: "==", value: null, line: 115 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 115 }
Token { type: AND, lexeme: "and", value: null, line: 115 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 115 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 115 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 115 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 115 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 115 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 115 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 115 }
Token { type: EQUAL, lexeme: "==", value: null, line: 115 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 115 }
Token { type: AND, lexeme: "and", value: null, line: 115 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 115 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 115 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 115 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 115 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 115 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 115 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 115 }
Token { type: EQUAL, lexeme: "==", value: null, line: 115 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 115 }
Token { type: THEN, lexeme: "then", value: null, line: 115 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 116 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 116 }
Token { type: TRUE, lexeme: "true", value: null, line: 116 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 116 }
Token { type: END, lexeme: "end", value: null, line: 117 }
Token { type: IF, lexeme: "if", value: null, line: 118 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 118 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 118 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 118 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 118 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 118 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 118 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 118 }
Token { type: EQUAL, lexeme: "==", value: null, line: 118 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 118 }
Token { type: AND, lexeme: "and", value: null, line: 118 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 118 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 118 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 118 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 118 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 118 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 118 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 118 }
Token { type: EQUAL, lexeme: "==", value: null, line: 118 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 118 }
Token { type: AND, lexeme: "and", value: null, line: 118 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 118 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 118 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 118 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 118 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 118 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 118 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 118 }
Token { type: EQUAL, lexeme: "==", value: null, line: 118 }
Token { type: STRING, lexeme: "\"O\"", value: "O", line: 118 }
Token { type: THEN, lexeme: "then", value: null, line: 118 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 119 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 119 }
Token { type: TRUE, lexeme: "true", value: null, line: 119 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 119 }
Token { type: END, lexeme: "end", value: null, line: 120 }
Token { type: ELSE, lexeme: "else", value: null, line: 122 }
Token { type: IDENTIFIER, lexeme: "correct", value: null, line: 123 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 123 }
Token { type: FALSE, lexeme: "false", value: null, line: 123 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 123 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 124 }
Token { type: undefined, lexeme: ".", value: null, line: 124 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 124 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 124 }
Token { type: STRING, lexeme: "\"Player 2, please enter coordenates for X: \"", value: "Player 2, please enter coordenates for X: ", line: 124 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 124 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 124 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 125 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 125 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 125 }
Token { type: undefined, lexeme: ".", value: null, line: 125 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 125 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 125 }
Token { type: STRING, lexeme: "\"*n\"", value: "*n", line: 125 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 125 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 125 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 126 }
Token { type: undefined, lexeme: ".", value: null, line: 126 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 126 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 126 }
Token { type: STRING, lexeme: "\"*l\"", value: "*l", line: 126 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 126 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 126 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 127 }
Token { type: undefined, lexeme: ".", value: null, line: 127 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 127 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 127 }
Token { type: STRING, lexeme: "\"Player 2, please enter coordenates for Y: \"", value: "Player 2, please enter coordenates for Y: ", line: 127 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 127 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 127 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 128 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 128 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 128 }
Token { type: undefined, lexeme: ".", value: null, line: 128 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 128 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 128 }
Token { type: STRING, lexeme: "\"*n\"", value: "*n", line: 128 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 128 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 128 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 129 }
Token { type: undefined, lexeme: ".", value: null, line: 129 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 129 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 129 }
Token { type: STRING, lexeme: "\"*l\"", value: "*l", line: 129 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 129 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 129 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 130 }
Token { type: undefined, lexeme: ".", value: null, line: 130 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 130 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 130 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 130 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 130 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 130 }
Token { type: WHILE, lexeme: "while", value: null, line: 132 }
Token { type: NOT, lexeme: "not", value: null, line: 132 }
Token { type: IDENTIFIER, lexeme: "correct", value: null, line: 132 }
Token { type: DO, lexeme: "do", value: null, line: 132 }
Token { type: IF, lexeme: "if", value: null, line: 133 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 133 }
Token { type: EQUAL, lexeme: "==", value: null, line: 133 }
Token { type: NUMBER, lexeme: "2", value: 2, line: 133 }
Token { type: OR, lexeme: "or", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 133 }
Token { type: EQUAL, lexeme: "==", value: null, line: 133 }
Token { type: NUMBER, lexeme: "4", value: 4, line: 133 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 133 }
Token { type: AND, lexeme: "and", value: null, line: 133 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 133 }
Token { type: EQUAL, lexeme: "==", value: null, line: 133 }
Token { type: NUMBER, lexeme: "2", value: 2, line: 133 }
Token { type: OR, lexeme: "or", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 133 }
Token { type: EQUAL, lexeme: "==", value: null, line: 133 }
Token { type: NUMBER, lexeme: "4", value: 4, line: 133 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 133 }
Token { type: OR, lexeme: "or", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 133 }
Token { type: GREATER, lexeme: ">", value: null, line: 133 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 133 }
Token { type: OR, lexeme: "or", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 133 }
Token { type: LESS, lexeme: "<", value: null, line: 133 }
Token { type: NUMBER, lexeme: "0", value: 0, line: 133 }
Token { type: OR, lexeme: "or", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 133 }
Token { type: GREATER, lexeme: ">", value: null, line: 133 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 133 }
Token { type: OR, lexeme: "or", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 133 }
Token { type: LESS, lexeme: "<", value: null, line: 133 }
Token { type: NUMBER, lexeme: "0", value: 0, line: 133 }
Token { type: OR, lexeme: "or", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 133 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 133 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 133 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 133 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 133 }
Token { type: EQUAL, lexeme: "==", value: null, line: 133 }
Token { type: STRING, lexeme: "\"F\"", value: "F", line: 133 }
Token { type: THEN, lexeme: "then", value: null, line: 133 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 134 }
Token { type: undefined, lexeme: ".", value: null, line: 134 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 134 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 134 }
Token { type: STRING, lexeme: "\"ERROR!! Can't place your move there. Player 2, please enter coordenates for X: \"", value: "ERROR!! Can't place your move there. Player 2, please enter coordenates for X: ", line: 134 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 134 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 134 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 135 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 135 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 135 }
Token { type: undefined, lexeme: ".", value: null, line: 135 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 135 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 135 }
Token { type: STRING, lexeme: "\"*n\"", value: "*n", line: 135 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 135 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 135 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 136 }
Token { type: undefined, lexeme: ".", value: null, line: 136 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 136 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 136 }
Token { type: STRING, lexeme: "\"*l\"", value: "*l", line: 136 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 136 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 136 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 137 }
Token { type: undefined, lexeme: ".", value: null, line: 137 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 137 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 137 }
Token { type: STRING, lexeme: "\"Player 2, please enter coordenates for Y: \"", value: "Player 2, please enter coordenates for Y: ", line: 137 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 137 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 137 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 138 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 138 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 138 }
Token { type: undefined, lexeme: ".", value: null, line: 138 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 138 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 138 }
Token { type: STRING, lexeme: "\"*n\"", value: "*n", line: 138 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 138 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 138 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 139 }
Token { type: undefined, lexeme: ".", value: null, line: 139 }
Token { type: IDENTIFIER, lexeme: "read", value: null, line: 139 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 139 }
Token { type: STRING, lexeme: "\"*l\"", value: "*l", line: 139 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 139 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 139 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 140 }
Token { type: undefined, lexeme: ".", value: null, line: 140 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 140 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 140 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 140 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 140 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 140 }
Token { type: ELSE, lexeme: "else", value: null, line: 141 }
Token { type: IDENTIFIER, lexeme: "correct", value: null, line: 142 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 142 }
Token { type: TRUE, lexeme: "true", value: null, line: 142 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 142 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 143 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 143 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 143 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 143 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 143 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 143 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 143 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 143 }
Token { type: STRING, lexeme: "\"F\"", value: "F", line: 143 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 143 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 144 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 144 }
Token { type: IDENTIFIER, lexeme: "valueX", value: null, line: 144 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 144 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 144 }
Token { type: IDENTIFIER, lexeme: "valueY", value: null, line: 144 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 144 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 144 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 144 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 144 }
Token { type: IDENTIFIER, lexeme: "turn", value: null, line: 145 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 145 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 145 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 145 }
Token { type: END, lexeme: "end", value: null, line: 146 }
Token { type: END, lexeme: "end", value: null, line: 147 }
Token { type: FOR, lexeme: "for", value: null, line: 149 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 149 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 149 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 149 }
Token { type: COMMA, lexeme: ",", value: null, line: 149 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 149 }
Token { type: DO, lexeme: "do", value: null, line: 149 }
Token { type: FOR, lexeme: "for", value: null, line: 150 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 150 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 150 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 150 }
Token { type: COMMA, lexeme: ",", value: null, line: 150 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 150 }
Token { type: DO, lexeme: "do", value: null, line: 150 }
Token { type: IF, lexeme: "if", value: null, line: 151 }
Token { type: IDENTIFIER, lexeme: "auxBoard", value: null, line: 151 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 151 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 151 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 151 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 151 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 151 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 151 }
Token { type: EQUAL, lexeme: "==", value: null, line: 151 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 151 }
Token { type: THEN, lexeme: "then", value: null, line: 151 }
Token { type: IDENTIFIER, lexeme: "left", value: null, line: 152 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 152 }
Token { type: TRUE, lexeme: "true", value: null, line: 152 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 152 }
Token { type: END, lexeme: "end", value: null, line: 153 }
Token { type: IF, lexeme: "if", value: null, line: 154 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 154 }
Token { type: EQUAL, lexeme: "==", value: null, line: 154 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 154 }
Token { type: AND, lexeme: "and", value: null, line: 154 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 154 }
Token { type: EQUAL, lexeme: "==", value: null, line: 154 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 154 }
Token { type: AND, lexeme: "and", value: null, line: 154 }
Token { type: NOT, lexeme: "not", value: null, line: 154 }
Token { type: IDENTIFIER, lexeme: "left", value: null, line: 154 }
Token { type: THEN, lexeme: "then", value: null, line: 154 }
Token { type: IDENTIFIER, lexeme: "finale", value: null, line: 155 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 155 }
Token { type: TRUE, lexeme: "true", value: null, line: 155 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 155 }
Token { type: END, lexeme: "end", value: null, line: 156 }
Token { type: END, lexeme: "end", value: null, line: 157 }
Token { type: END, lexeme: "end", value: null, line: 158 }
Token { type: IDENTIFIER, lexeme: "left", value: null, line: 160 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 160 }
Token { type: FALSE, lexeme: "false", value: null, line: 160 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 160 }
Token { type: IF, lexeme: "if", value: null, line: 163 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 163 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 163 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 163 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 163 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 163 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 163 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 163 }
Token { type: EQUAL, lexeme: "==", value: null, line: 163 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 163 }
Token { type: AND, lexeme: "and", value: null, line: 163 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 163 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 163 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 163 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 163 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 163 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 163 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 163 }
Token { type: EQUAL, lexeme: "==", value: null, line: 163 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 163 }
Token { type: AND, lexeme: "and", value: null, line: 163 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 163 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 163 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 163 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 163 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 163 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 163 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 163 }
Token { type: EQUAL, lexeme: "==", value: null, line: 163 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 163 }
Token { type: THEN, lexeme: "then", value: null, line: 163 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 164 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 164 }
Token { type: TRUE, lexeme: "true", value: null, line: 164 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 164 }
Token { type: END, lexeme: "end", value: null, line: 165 }
Token { type: IF, lexeme: "if", value: null, line: 166 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 166 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 166 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 166 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 166 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 166 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 166 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 166 }
Token { type: EQUAL, lexeme: "==", value: null, line: 166 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 166 }
Token { type: AND, lexeme: "and", value: null, line: 166 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 166 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 166 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 166 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 166 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 166 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 166 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 166 }
Token { type: EQUAL, lexeme: "==", value: null, line: 166 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 166 }
Token { type: AND, lexeme: "and", value: null, line: 166 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 166 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 166 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 166 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 166 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 166 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 166 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 166 }
Token { type: EQUAL, lexeme: "==", value: null, line: 166 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 166 }
Token { type: THEN, lexeme: "then", value: null, line: 166 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 167 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 167 }
Token { type: TRUE, lexeme: "true", value: null, line: 167 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 167 }
Token { type: END, lexeme: "end", value: null, line: 168 }
Token { type: IF, lexeme: "if", value: null, line: 169 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 169 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 169 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 169 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 169 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 169 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 169 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 169 }
Token { type: EQUAL, lexeme: "==", value: null, line: 169 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 169 }
Token { type: AND, lexeme: "and", value: null, line: 169 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 169 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 169 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 169 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 169 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 169 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 169 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 169 }
Token { type: EQUAL, lexeme: "==", value: null, line: 169 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 169 }
Token { type: AND, lexeme: "and", value: null, line: 169 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 169 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 169 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 169 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 169 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 169 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 169 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 169 }
Token { type: EQUAL, lexeme: "==", value: null, line: 169 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 169 }
Token { type: THEN, lexeme: "then", value: null, line: 169 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 170 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 170 }
Token { type: TRUE, lexeme: "true", value: null, line: 170 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 170 }
Token { type: END, lexeme: "end", value: null, line: 171 }
Token { type: IF, lexeme: "if", value: null, line: 173 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 173 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 173 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 173 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 173 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 173 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 173 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 173 }
Token { type: EQUAL, lexeme: "==", value: null, line: 173 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 173 }
Token { type: AND, lexeme: "and", value: null, line: 173 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 173 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 173 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 173 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 173 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 173 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 173 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 173 }
Token { type: EQUAL, lexeme: "==", value: null, line: 173 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 173 }
Token { type: AND, lexeme: "and", value: null, line: 173 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 173 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 173 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 173 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 173 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 173 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 173 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 173 }
Token { type: EQUAL, lexeme: "==", value: null, line: 173 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 173 }
Token { type: THEN, lexeme: "then", value: null, line: 173 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 174 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 174 }
Token { type: TRUE, lexeme: "true", value: null, line: 174 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 174 }
Token { type: END, lexeme: "end", value: null, line: 175 }
Token { type: IF, lexeme: "if", value: null, line: 176 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 176 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 176 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 176 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 176 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 176 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 176 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 176 }
Token { type: EQUAL, lexeme: "==", value: null, line: 176 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 176 }
Token { type: AND, lexeme: "and", value: null, line: 176 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 176 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 176 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 176 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 176 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 176 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 176 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 176 }
Token { type: EQUAL, lexeme: "==", value: null, line: 176 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 176 }
Token { type: AND, lexeme: "and", value: null, line: 176 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 176 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 176 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 176 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 176 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 176 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 176 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 176 }
Token { type: EQUAL, lexeme: "==", value: null, line: 176 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 176 }
Token { type: THEN, lexeme: "then", value: null, line: 176 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 177 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 177 }
Token { type: TRUE, lexeme: "true", value: null, line: 177 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 177 }
Token { type: END, lexeme: "end", value: null, line: 178 }
Token { type: IF, lexeme: "if", value: null, line: 179 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 179 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 179 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 179 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 179 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 179 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 179 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 179 }
Token { type: EQUAL, lexeme: "==", value: null, line: 179 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 179 }
Token { type: AND, lexeme: "and", value: null, line: 179 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 179 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 179 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 179 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 179 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 179 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 179 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 179 }
Token { type: EQUAL, lexeme: "==", value: null, line: 179 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 179 }
Token { type: AND, lexeme: "and", value: null, line: 179 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 179 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 179 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 179 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 179 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 179 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 179 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 179 }
Token { type: EQUAL, lexeme: "==", value: null, line: 179 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 179 }
Token { type: THEN, lexeme: "then", value: null, line: 179 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 180 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 180 }
Token { type: TRUE, lexeme: "true", value: null, line: 180 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 180 }
Token { type: END, lexeme: "end", value: null, line: 181 }
Token { type: IF, lexeme: "if", value: null, line: 183 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 183 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 183 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 183 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 183 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 183 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 183 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 183 }
Token { type: EQUAL, lexeme: "==", value: null, line: 183 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 183 }
Token { type: AND, lexeme: "and", value: null, line: 183 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 183 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 183 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 183 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 183 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 183 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 183 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 183 }
Token { type: EQUAL, lexeme: "==", value: null, line: 183 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 183 }
Token { type: AND, lexeme: "and", value: null, line: 183 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 183 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 183 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 183 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 183 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 183 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 183 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 183 }
Token { type: EQUAL, lexeme: "==", value: null, line: 183 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 183 }
Token { type: THEN, lexeme: "then", value: null, line: 183 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 184 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 184 }
Token { type: TRUE, lexeme: "true", value: null, line: 184 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 184 }
Token { type: END, lexeme: "end", value: null, line: 185 }
Token { type: IF, lexeme: "if", value: null, line: 186 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 186 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 186 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 186 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 186 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 186 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 186 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 186 }
Token { type: EQUAL, lexeme: "==", value: null, line: 186 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 186 }
Token { type: AND, lexeme: "and", value: null, line: 186 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 186 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 186 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 186 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 186 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 186 }
Token { type: NUMBER, lexeme: "3", value: 3, line: 186 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 186 }
Token { type: EQUAL, lexeme: "==", value: null, line: 186 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 186 }
Token { type: AND, lexeme: "and", value: null, line: 186 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 186 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 186 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 186 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 186 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 186 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 186 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 186 }
Token { type: EQUAL, lexeme: "==", value: null, line: 186 }
Token { type: STRING, lexeme: "\"T\"", value: "T", line: 186 }
Token { type: THEN, lexeme: "then", value: null, line: 186 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 187 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 187 }
Token { type: TRUE, lexeme: "true", value: null, line: 187 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 187 }
Token { type: END, lexeme: "end", value: null, line: 188 }
Token { type: END, lexeme: "end", value: null, line: 190 }
Token { type: FOR, lexeme: "for", value: null, line: 194 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 194 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 194 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 194 }
Token { type: COMMA, lexeme: ",", value: null, line: 194 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 194 }
Token { type: DO, lexeme: "do", value: null, line: 194 }
Token { type: FOR, lexeme: "for", value: null, line: 195 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 195 }
Token { type: ASSIGN, lexeme: "=", value: null, line: 195 }
Token { type: NUMBER, lexeme: "1", value: 1, line: 195 }
Token { type: COMMA, lexeme: ",", value: null, line: 195 }
Token { type: NUMBER, lexeme: "5", value: 5, line: 195 }
Token { type: DO, lexeme: "do", value: null, line: 195 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 196 }
Token { type: undefined, lexeme: ".", value: null, line: 196 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 196 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 196 }
Token { type: IDENTIFIER, lexeme: "board", value: null, line: 196 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 196 }
Token { type: IDENTIFIER, lexeme: "i", value: null, line: 196 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 196 }
Token { type: LEFT_BRACKET, lexeme: "[", value: null, line: 196 }
Token { type: IDENTIFIER, lexeme: "j", value: null, line: 196 }
Token { type: RIGHT_BRACET, lexeme: "]", value: null, line: 196 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 196 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 196 }
Token { type: END, lexeme: "end", value: null, line: 197 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 198 }
Token { type: undefined, lexeme: ".", value: null, line: 198 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 198 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 198 }
Token { type: STRING, lexeme: "\"\\n\"", value: "\\n", line: 198 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 198 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 198 }
Token { type: END, lexeme: "end", value: null, line: 199 }
Token { type: END, lexeme: "end", value: null, line: 201 }
Token { type: IF, lexeme: "if", value: null, line: 203 }
Token { type: IDENTIFIER, lexeme: "finale", value: null, line: 203 }
Token { type: THEN, lexeme: "then", value: null, line: 203 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 204 }
Token { type: undefined, lexeme: ".", value: null, line: 204 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 204 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 204 }
Token { type: STRING, lexeme: "\"\\nIt's a draw!!\\n\"", value: "\\nIt's a draw!!\\n", line: 204 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 204 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 204 }
Token { type: END, lexeme: "end", value: null, line: 205 }
Token { type: IF, lexeme: "if", value: null, line: 206 }
Token { type: IDENTIFIER, lexeme: "win1", value: null, line: 206 }
Token { type: THEN, lexeme: "then", value: null, line: 206 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 207 }
Token { type: undefined, lexeme: ".", value: null, line: 207 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 207 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 207 }
Token { type: STRING, lexeme: "\"\\nPlayer 1 won!!\\n\"", value: "\\nPlayer 1 won!!\\n", line: 207 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 207 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 207 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 208 }
Token { type: undefined, lexeme: ".", value: null, line: 208 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 208 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 208 }
Token { type: STRING, lexeme: "\"Player 1 won!!\\n\"", value: "Player 1 won!!\\n", line: 208 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 208 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 208 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 209 }
Token { type: undefined, lexeme: ".", value: null, line: 209 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 209 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 209 }
Token { type: STRING, lexeme: "\"Player 1 won!!\\n\"", value: "Player 1 won!!\\n", line: 209 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 209 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 209 }
Token { type: END, lexeme: "end", value: null, line: 210 }
Token { type: IF, lexeme: "if", value: null, line: 211 }
Token { type: IDENTIFIER, lexeme: "win2", value: null, line: 211 }
Token { type: THEN, lexeme: "then", value: null, line: 211 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 212 }
Token { type: undefined, lexeme: ".", value: null, line: 212 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 212 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 212 }
Token { type: STRING, lexeme: "\"\\nPlayer 2 won!!\\n\"", value: "\\nPlayer 2 won!!\\n", line: 212 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 212 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 212 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 213 }
Token { type: undefined, lexeme: ".", value: null, line: 213 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 213 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 213 }
Token { type: STRING, lexeme: "\"Player 2 won!!\\n\"", value: "Player 2 won!!\\n", line: 213 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 213 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 213 }
Token { type: IDENTIFIER, lexeme: "io", value: null, line: 214 }
Token { type: undefined, lexeme: ".", value: null, line: 214 }
Token { type: IDENTIFIER, lexeme: "write", value: null, line: 214 }
Token { type: LEFT_PAREN, lexeme: "(", value: null, line: 214 }
Token { type: STRING, lexeme: "\"Player 2 won!!\\n\"", value: "Player 2 won!!\\n", line: 214 }
Token { type: RIGHT_PAREN, lexeme: ")", value: null, line: 214 }
Token { type: SEMICOLON, lexeme: ";", value: null, line: 214 }
Token { type: END, lexeme: "end", value: null, line: 215 }
Token { type: END, lexeme: "end", value: null, line: 217 }
Token { type: EOF, lexeme: "\u0000", value: null, line: 217 }